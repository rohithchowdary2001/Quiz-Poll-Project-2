{"ast":null,"code":"import React,{createContext,useContext,useReducer,useEffect}from'react';import{toast}from'react-toastify';import authService from'../services/authService';// Initial state\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={user:null,token:localStorage.getItem('token'),loading:true,error:null};// Action types\nconst AUTH_ACTIONS={LOGIN_START:'LOGIN_START',LOGIN_SUCCESS:'LOGIN_SUCCESS',LOGIN_FAILURE:'LOGIN_FAILURE',LOGOUT:'LOGOUT',REGISTER_START:'REGISTER_START',REGISTER_SUCCESS:'REGISTER_SUCCESS',REGISTER_FAILURE:'REGISTER_FAILURE',SET_LOADING:'SET_LOADING',CLEAR_ERROR:'CLEAR_ERROR',UPDATE_USER:'UPDATE_USER'};// Reducer function\nconst authReducer=(state,action)=>{switch(action.type){case AUTH_ACTIONS.LOGIN_START:case AUTH_ACTIONS.REGISTER_START:return{...state,loading:true,error:null};case AUTH_ACTIONS.LOGIN_SUCCESS:case AUTH_ACTIONS.REGISTER_SUCCESS:localStorage.setItem('token',action.payload.token);return{...state,user:action.payload.user,token:action.payload.token,loading:false,error:null};case AUTH_ACTIONS.LOGIN_FAILURE:case AUTH_ACTIONS.REGISTER_FAILURE:localStorage.removeItem('token');return{...state,user:null,token:null,loading:false,error:action.payload};case AUTH_ACTIONS.LOGOUT:localStorage.removeItem('token');return{...state,user:null,token:null,loading:false,error:null};case AUTH_ACTIONS.SET_LOADING:return{...state,loading:action.payload};case AUTH_ACTIONS.CLEAR_ERROR:return{...state,error:null};case AUTH_ACTIONS.UPDATE_USER:return{...state,user:{...state.user,...action.payload}};default:return state;}};// Create context\nconst AuthContext=/*#__PURE__*/createContext();// Auth provider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(authReducer,initialState);// Check if user is authenticated on app load\nuseEffect(()=>{const verifyToken=async()=>{const token=localStorage.getItem('token');if(token){try{const response=await authService.verifyToken();dispatch({type:AUTH_ACTIONS.LOGIN_SUCCESS,payload:{user:response.user,token:token}});}catch(error){localStorage.removeItem('token');dispatch({type:AUTH_ACTIONS.LOGOUT});}}else{dispatch({type:AUTH_ACTIONS.SET_LOADING,payload:false});}};verifyToken();},[]);// Login function\nconst login=async credentials=>{try{dispatch({type:AUTH_ACTIONS.LOGIN_START});const response=await authService.login(credentials);dispatch({type:AUTH_ACTIONS.LOGIN_SUCCESS,payload:{user:response.user,token:response.token}});toast.success('Login successful!');return{success:true};}catch(error){var _error$response,_error$response$data;const errorMessage=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Login failed';dispatch({type:AUTH_ACTIONS.LOGIN_FAILURE,payload:errorMessage});toast.error(errorMessage);return{success:false,error:errorMessage};}};// Register function\nconst register=async userData=>{try{dispatch({type:AUTH_ACTIONS.REGISTER_START});const response=await authService.register(userData);dispatch({type:AUTH_ACTIONS.REGISTER_SUCCESS,payload:{user:response.user,token:response.token}});toast.success('Registration successful!');return{success:true};}catch(error){var _error$response2,_error$response2$data;const errorMessage=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Registration failed';dispatch({type:AUTH_ACTIONS.REGISTER_FAILURE,payload:errorMessage});toast.error(errorMessage);return{success:false,error:errorMessage};}};// Logout function\nconst logout=async()=>{try{await authService.logout();}catch(error){// Even if logout API fails, we still want to clear local state\nconsole.error('Logout API error:',error);}dispatch({type:AUTH_ACTIONS.LOGOUT});toast.info('Logged out successfully');};// Update profile function\nconst updateProfile=async profileData=>{try{const response=await authService.updateProfile(profileData);dispatch({type:AUTH_ACTIONS.UPDATE_USER,payload:response.user});toast.success('Profile updated successfully!');return{success:true};}catch(error){var _error$response3,_error$response3$data;const errorMessage=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Profile update failed';toast.error(errorMessage);return{success:false,error:errorMessage};}};// Change password function\nconst changePassword=async passwordData=>{try{await authService.changePassword(passwordData);toast.success('Password changed successfully!');return{success:true};}catch(error){var _error$response4,_error$response4$data;const errorMessage=((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Password change failed';toast.error(errorMessage);return{success:false,error:errorMessage};}};// Clear error function\nconst clearError=()=>{dispatch({type:AUTH_ACTIONS.CLEAR_ERROR});};// Check if user has required role\nconst hasRole=requiredRole=>{if(!state.user)return false;if(Array.isArray(requiredRole)){return requiredRole.includes(state.user.role);}return state.user.role===requiredRole;};// Check if user is admin\nconst isAdmin=()=>{var _state$user;return((_state$user=state.user)===null||_state$user===void 0?void 0:_state$user.role)==='admin';};// Check if user is professor\nconst isProfessor=()=>{var _state$user2;return((_state$user2=state.user)===null||_state$user2===void 0?void 0:_state$user2.role)==='professor';};// Check if user is student\nconst isStudent=()=>{var _state$user3;return((_state$user3=state.user)===null||_state$user3===void 0?void 0:_state$user3.role)==='student';};// Context value\nconst value={user:state.user,token:state.token,loading:state.loading,error:state.error,login,register,logout,updateProfile,changePassword,clearError,hasRole,isAdmin,isProfessor,isStudent};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// Custom hook to use auth context\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export default AuthContext;","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","toast","authService","jsx","_jsx","initialState","user","token","localStorage","getItem","loading","error","AUTH_ACTIONS","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","REGISTER_START","REGISTER_SUCCESS","REGISTER_FAILURE","SET_LOADING","CLEAR_ERROR","UPDATE_USER","authReducer","state","action","type","setItem","payload","removeItem","AuthContext","AuthProvider","_ref","children","dispatch","verifyToken","response","login","credentials","success","_error$response","_error$response$data","errorMessage","data","message","register","userData","_error$response2","_error$response2$data","logout","console","info","updateProfile","profileData","_error$response3","_error$response3$data","changePassword","passwordData","_error$response4","_error$response4$data","clearError","hasRole","requiredRole","Array","isArray","includes","role","isAdmin","_state$user","isProfessor","_state$user2","isStudent","_state$user3","value","Provider","useAuth","context","Error"],"sources":["/home/mounikavemula/Documents/PROJECT/quizManagement/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport authService from '../services/authService';\n\n// Initial state\nconst initialState = {\n  user: null,\n  token: localStorage.getItem('token'),\n  loading: true,\n  error: null,\n};\n\n// Action types\nconst AUTH_ACTIONS = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  LOGOUT: 'LOGOUT',\n  REGISTER_START: 'REGISTER_START',\n  REGISTER_SUCCESS: 'REGISTER_SUCCESS',\n  REGISTER_FAILURE: 'REGISTER_FAILURE',\n  SET_LOADING: 'SET_LOADING',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER',\n};\n\n// Reducer function\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.LOGIN_START:\n    case AUTH_ACTIONS.REGISTER_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n    case AUTH_ACTIONS.REGISTER_SUCCESS:\n      localStorage.setItem('token', action.payload.token);\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null,\n      };\n\n    case AUTH_ACTIONS.LOGIN_FAILURE:\n    case AUTH_ACTIONS.REGISTER_FAILURE:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload,\n      };\n\n    case AUTH_ACTIONS.LOGOUT:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false,\n        error: null,\n      };\n\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null,\n      };\n\n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: { ...state.user, ...action.payload },\n      };\n\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = createContext();\n\n// Auth provider component\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    const verifyToken = async () => {\n      const token = localStorage.getItem('token');\n      \n      if (token) {\n        try {\n          const response = await authService.verifyToken();\n          dispatch({\n            type: AUTH_ACTIONS.LOGIN_SUCCESS,\n            payload: {\n              user: response.user,\n              token: token,\n            },\n          });\n        } catch (error) {\n          localStorage.removeItem('token');\n          dispatch({ type: AUTH_ACTIONS.LOGOUT });\n        }\n      } else {\n        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\n      }\n    };\n\n    verifyToken();\n  }, []);\n\n  // Login function\n  const login = async (credentials) => {\n    try {\n      dispatch({ type: AUTH_ACTIONS.LOGIN_START });\n      \n      const response = await authService.login(credentials);\n      \n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\n        payload: {\n          user: response.user,\n          token: response.token,\n        },\n      });\n\n      toast.success('Login successful!');\n      return { success: true };\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Login failed';\n      \n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_FAILURE,\n        payload: errorMessage,\n      });\n\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      dispatch({ type: AUTH_ACTIONS.REGISTER_START });\n      \n      const response = await authService.register(userData);\n      \n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_SUCCESS,\n        payload: {\n          user: response.user,\n          token: response.token,\n        },\n      });\n\n      toast.success('Registration successful!');\n      return { success: true };\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Registration failed';\n      \n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_FAILURE,\n        payload: errorMessage,\n      });\n\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      // Even if logout API fails, we still want to clear local state\n      console.error('Logout API error:', error);\n    }\n    \n    dispatch({ type: AUTH_ACTIONS.LOGOUT });\n    toast.info('Logged out successfully');\n  };\n\n  // Update profile function\n  const updateProfile = async (profileData) => {\n    try {\n      const response = await authService.updateProfile(profileData);\n      \n      dispatch({\n        type: AUTH_ACTIONS.UPDATE_USER,\n        payload: response.user,\n      });\n\n      toast.success('Profile updated successfully!');\n      return { success: true };\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Profile update failed';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Change password function\n  const changePassword = async (passwordData) => {\n    try {\n      await authService.changePassword(passwordData);\n      toast.success('Password changed successfully!');\n      return { success: true };\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Password change failed';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\n  };\n\n  // Check if user has required role\n  const hasRole = (requiredRole) => {\n    if (!state.user) return false;\n    if (Array.isArray(requiredRole)) {\n      return requiredRole.includes(state.user.role);\n    }\n    return state.user.role === requiredRole;\n  };\n\n  // Check if user is admin\n  const isAdmin = () => state.user?.role === 'admin';\n\n  // Check if user is professor\n  const isProfessor = () => state.user?.role === 'professor';\n\n  // Check if user is student\n  const isStudent = () => state.user?.role === 'student';\n\n  // Context value\n  const value = {\n    user: state.user,\n    token: state.token,\n    loading: state.loading,\n    error: state.error,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    clearError,\n    hasRole,\n    isAdmin,\n    isProfessor,\n    isStudent,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}