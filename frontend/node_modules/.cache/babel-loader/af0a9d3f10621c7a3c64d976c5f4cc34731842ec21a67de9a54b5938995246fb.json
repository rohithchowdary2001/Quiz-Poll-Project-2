{"ast":null,"code":"import React from'react';import{Navigate,useLocation}from'react-router-dom';import{useAuth}from'../../context/AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children,requiredRole=null}=_ref;const{user,loading,token}=useAuth();const location=useLocation();// Debug logging\nconsole.log('ProtectedRoute - Current state:',{user:user,loading:loading,token:token,requiredRole:requiredRole,currentPath:location.pathname});// Show loading spinner while checking authentication\nif(loading){console.log('ProtectedRoute - Still loading...');return/*#__PURE__*/_jsx(\"div\",{className:\"d-flex justify-content-center align-items-center min-vh-100\",children:/*#__PURE__*/_jsx(\"div\",{className:\"spinner-border text-primary\",role:\"status\",children:/*#__PURE__*/_jsx(\"span\",{className:\"visually-hidden\",children:\"Loading...\"})})});}// If not authenticated, redirect to login\nif(!user){console.log('ProtectedRoute - No user found, redirecting to login');return/*#__PURE__*/_jsx(Navigate,{to:\"/login\",state:{from:location},replace:true});}// If specific role is required and user doesn't have it, redirect to appropriate dashboard\nif(requiredRole&&user.role!==requiredRole){console.log('ProtectedRoute - Role mismatch. Required:',requiredRole,'User role:',user.role);// Redirect to user's appropriate dashboard\nif(user.role==='admin'){return/*#__PURE__*/_jsx(Navigate,{to:\"/admin/dashboard\",replace:true});}else if(user.role==='professor'){return/*#__PURE__*/_jsx(Navigate,{to:\"/professor/dashboard\",replace:true});}else{return/*#__PURE__*/_jsx(Navigate,{to:\"/student/dashboard\",replace:true});}}// If authenticated and authorized, render the component\nconsole.log('ProtectedRoute - Access granted, rendering component');return children;};export default ProtectedRoute;","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","jsx","_jsx","ProtectedRoute","_ref","children","requiredRole","user","loading","token","location","console","log","currentPath","pathname","className","role","to","state","from","replace"],"sources":["/home/mounikavemula/Documents/PROJECT/quizManagement/frontend/src/components/common/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\n\nconst ProtectedRoute = ({ children, requiredRole = null }) => {\n    const { user, loading, token } = useAuth();\n    const location = useLocation();\n\n    // Debug logging\n    console.log('ProtectedRoute - Current state:', {\n        user: user,\n        loading: loading,\n        token: token,\n        requiredRole: requiredRole,\n        currentPath: location.pathname\n    });\n\n    // Show loading spinner while checking authentication\n    if (loading) {\n        console.log('ProtectedRoute - Still loading...');\n        return (\n            <div className=\"d-flex justify-content-center align-items-center min-vh-100\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </div>\n            </div>\n        );\n    }\n\n    // If not authenticated, redirect to login\n    if (!user) {\n        console.log('ProtectedRoute - No user found, redirecting to login');\n        return <Navigate to=\"/login\" state={{ from: location }} replace />;\n    }\n\n    // If specific role is required and user doesn't have it, redirect to appropriate dashboard\n    if (requiredRole && user.role !== requiredRole) {\n        console.log('ProtectedRoute - Role mismatch. Required:', requiredRole, 'User role:', user.role);\n        // Redirect to user's appropriate dashboard\n        if (user.role === 'admin') {\n            return <Navigate to=\"/admin/dashboard\" replace />;\n        } else if (user.role === 'professor') {\n            return <Navigate to=\"/professor/dashboard\" replace />;\n        } else {\n            return <Navigate to=\"/student/dashboard\" replace />;\n        }\n    }\n\n    // If authenticated and authorized, render the component\n    console.log('ProtectedRoute - Access granted, rendering component');\n    return children;\n};\n\nexport default ProtectedRoute; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,WAAW,KAAQ,kBAAkB,CACxD,OAASC,OAAO,KAAQ,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEpD,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAAuC,IAAtC,CAAEC,QAAQ,CAAEC,YAAY,CAAG,IAAK,CAAC,CAAAF,IAAA,CACrD,KAAM,CAAEG,IAAI,CAAEC,OAAO,CAAEC,KAAM,CAAC,CAAGT,OAAO,CAAC,CAAC,CAC1C,KAAM,CAAAU,QAAQ,CAAGX,WAAW,CAAC,CAAC,CAE9B;AACAY,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAE,CAC3CL,IAAI,CAAEA,IAAI,CACVC,OAAO,CAAEA,OAAO,CAChBC,KAAK,CAAEA,KAAK,CACZH,YAAY,CAAEA,YAAY,CAC1BO,WAAW,CAAEH,QAAQ,CAACI,QAC1B,CAAC,CAAC,CAEF;AACA,GAAIN,OAAO,CAAE,CACTG,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAChD,mBACIV,IAAA,QAAKa,SAAS,CAAC,6DAA6D,CAAAV,QAAA,cACxEH,IAAA,QAAKa,SAAS,CAAC,6BAA6B,CAACC,IAAI,CAAC,QAAQ,CAAAX,QAAA,cACtDH,IAAA,SAAMa,SAAS,CAAC,iBAAiB,CAAAV,QAAA,CAAC,YAAU,CAAM,CAAC,CAClD,CAAC,CACL,CAAC,CAEd,CAEA;AACA,GAAI,CAACE,IAAI,CAAE,CACPI,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC,CACnE,mBAAOV,IAAA,CAACJ,QAAQ,EAACmB,EAAE,CAAC,QAAQ,CAACC,KAAK,CAAE,CAAEC,IAAI,CAAET,QAAS,CAAE,CAACU,OAAO,MAAE,CAAC,CACtE,CAEA;AACA,GAAId,YAAY,EAAIC,IAAI,CAACS,IAAI,GAAKV,YAAY,CAAE,CAC5CK,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAEN,YAAY,CAAE,YAAY,CAAEC,IAAI,CAACS,IAAI,CAAC,CAC/F;AACA,GAAIT,IAAI,CAACS,IAAI,GAAK,OAAO,CAAE,CACvB,mBAAOd,IAAA,CAACJ,QAAQ,EAACmB,EAAE,CAAC,kBAAkB,CAACG,OAAO,MAAE,CAAC,CACrD,CAAC,IAAM,IAAIb,IAAI,CAACS,IAAI,GAAK,WAAW,CAAE,CAClC,mBAAOd,IAAA,CAACJ,QAAQ,EAACmB,EAAE,CAAC,sBAAsB,CAACG,OAAO,MAAE,CAAC,CACzD,CAAC,IAAM,CACH,mBAAOlB,IAAA,CAACJ,QAAQ,EAACmB,EAAE,CAAC,oBAAoB,CAACG,OAAO,MAAE,CAAC,CACvD,CACJ,CAEA;AACAT,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC,CACnE,MAAO,CAAAP,QAAQ,CACnB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}