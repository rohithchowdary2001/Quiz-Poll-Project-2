{"ast":null,"code":"var _jsxFileName = \"/home/mounikavemula/Documents/PROJECT/quizManagement/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport authService from '../services/authService';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null,\n  token: localStorage.getItem('token'),\n  loading: true,\n  error: null\n};\n\n// Action types\nconst AUTH_ACTIONS = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  LOGOUT: 'LOGOUT',\n  REGISTER_START: 'REGISTER_START',\n  REGISTER_SUCCESS: 'REGISTER_SUCCESS',\n  REGISTER_FAILURE: 'REGISTER_FAILURE',\n  SET_LOADING: 'SET_LOADING',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER'\n};\n\n// Reducer function\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.LOGIN_START:\n    case AUTH_ACTIONS.REGISTER_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n    case AUTH_ACTIONS.REGISTER_SUCCESS:\n      localStorage.setItem('token', action.payload.token);\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_FAILURE:\n    case AUTH_ACTIONS.REGISTER_FAILURE:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    const verifyToken = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const response = await authService.verifyToken();\n          dispatch({\n            type: AUTH_ACTIONS.LOGIN_SUCCESS,\n            payload: {\n              user: response.user,\n              token: token\n            }\n          });\n        } catch (error) {\n          localStorage.removeItem('token');\n          dispatch({\n            type: AUTH_ACTIONS.LOGOUT\n          });\n        }\n      } else {\n        dispatch({\n          type: AUTH_ACTIONS.SET_LOADING,\n          payload: false\n        });\n      }\n    };\n    verifyToken();\n  }, []);\n\n  // Login function\n  const login = async credentials => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_START\n      });\n      const response = await authService.login(credentials);\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\n        payload: {\n          user: response.user,\n          token: response.token\n        }\n      });\n      toast.success('Login successful!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed';\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_FAILURE,\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_START\n      });\n      const response = await authService.register(userData);\n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_SUCCESS,\n        payload: {\n          user: response.user,\n          token: response.token\n        }\n      });\n      toast.success('Registration successful!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed';\n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_FAILURE,\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      // Even if logout API fails, we still want to clear local state\n      console.error('Logout API error:', error);\n    }\n    dispatch({\n      type: AUTH_ACTIONS.LOGOUT\n    });\n    toast.info('Logged out successfully');\n  };\n\n  // Update profile function\n  const updateProfile = async profileData => {\n    try {\n      const response = await authService.updateProfile(profileData);\n      dispatch({\n        type: AUTH_ACTIONS.UPDATE_USER,\n        payload: response.user\n      });\n      toast.success('Profile updated successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Profile update failed';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Change password function\n  const changePassword = async passwordData => {\n    try {\n      await authService.changePassword(passwordData);\n      toast.success('Password changed successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Password change failed';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({\n      type: AUTH_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  // Check if user has required role\n  const hasRole = requiredRole => {\n    if (!state.user) return false;\n    if (Array.isArray(requiredRole)) {\n      return requiredRole.includes(state.user.role);\n    }\n    return state.user.role === requiredRole;\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    var _state$user;\n    return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.role) === 'admin';\n  };\n\n  // Check if user is professor\n  const isProfessor = () => {\n    var _state$user2;\n    return ((_state$user2 = state.user) === null || _state$user2 === void 0 ? void 0 : _state$user2.role) === 'professor';\n  };\n\n  // Check if user is student\n  const isStudent = () => {\n    var _state$user3;\n    return ((_state$user3 = state.user) === null || _state$user3 === void 0 ? void 0 : _state$user3.role) === 'student';\n  };\n\n  // Context value\n  const value = {\n    user: state.user,\n    token: state.token,\n    loading: state.loading,\n    error: state.error,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    clearError,\n    hasRole,\n    isAdmin,\n    isProfessor,\n    isStudent\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","toast","authService","jsxDEV","_jsxDEV","initialState","user","token","localStorage","getItem","loading","error","AUTH_ACTIONS","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","REGISTER_START","REGISTER_SUCCESS","REGISTER_FAILURE","SET_LOADING","CLEAR_ERROR","UPDATE_USER","authReducer","state","action","type","setItem","payload","removeItem","AuthContext","AuthProvider","children","_s","dispatch","verifyToken","response","login","credentials","success","_error$response","_error$response$data","errorMessage","data","message","register","userData","_error$response2","_error$response2$data","logout","console","info","updateProfile","profileData","_error$response3","_error$response3$data","changePassword","passwordData","_error$response4","_error$response4$data","clearError","hasRole","requiredRole","Array","isArray","includes","role","isAdmin","_state$user","isProfessor","_state$user2","isStudent","_state$user3","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/home/mounikavemula/Documents/PROJECT/quizManagement/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport authService from '../services/authService';\n\n// Initial state\nconst initialState = {\n  user: null,\n  token: localStorage.getItem('token'),\n  loading: true,\n  error: null,\n};\n\n// Action types\nconst AUTH_ACTIONS = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  LOGOUT: 'LOGOUT',\n  REGISTER_START: 'REGISTER_START',\n  REGISTER_SUCCESS: 'REGISTER_SUCCESS',\n  REGISTER_FAILURE: 'REGISTER_FAILURE',\n  SET_LOADING: 'SET_LOADING',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER',\n};\n\n// Reducer function\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.LOGIN_START:\n    case AUTH_ACTIONS.REGISTER_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n    case AUTH_ACTIONS.REGISTER_SUCCESS:\n      localStorage.setItem('token', action.payload.token);\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null,\n      };\n\n    case AUTH_ACTIONS.LOGIN_FAILURE:\n    case AUTH_ACTIONS.REGISTER_FAILURE:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload,\n      };\n\n    case AUTH_ACTIONS.LOGOUT:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false,\n        error: null,\n      };\n\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null,\n      };\n\n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: { ...state.user, ...action.payload },\n      };\n\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = createContext();\n\n// Auth provider component\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    const verifyToken = async () => {\n      const token = localStorage.getItem('token');\n      \n      if (token) {\n        try {\n          const response = await authService.verifyToken();\n          dispatch({\n            type: AUTH_ACTIONS.LOGIN_SUCCESS,\n            payload: {\n              user: response.user,\n              token: token,\n            },\n          });\n        } catch (error) {\n          localStorage.removeItem('token');\n          dispatch({ type: AUTH_ACTIONS.LOGOUT });\n        }\n      } else {\n        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\n      }\n    };\n\n    verifyToken();\n  }, []);\n\n  // Login function\n  const login = async (credentials) => {\n    try {\n      dispatch({ type: AUTH_ACTIONS.LOGIN_START });\n      \n      const response = await authService.login(credentials);\n      \n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\n        payload: {\n          user: response.user,\n          token: response.token,\n        },\n      });\n\n      toast.success('Login successful!');\n      return { success: true };\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Login failed';\n      \n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_FAILURE,\n        payload: errorMessage,\n      });\n\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      dispatch({ type: AUTH_ACTIONS.REGISTER_START });\n      \n      const response = await authService.register(userData);\n      \n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_SUCCESS,\n        payload: {\n          user: response.user,\n          token: response.token,\n        },\n      });\n\n      toast.success('Registration successful!');\n      return { success: true };\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Registration failed';\n      \n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_FAILURE,\n        payload: errorMessage,\n      });\n\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      // Even if logout API fails, we still want to clear local state\n      console.error('Logout API error:', error);\n    }\n    \n    dispatch({ type: AUTH_ACTIONS.LOGOUT });\n    toast.info('Logged out successfully');\n  };\n\n  // Update profile function\n  const updateProfile = async (profileData) => {\n    try {\n      const response = await authService.updateProfile(profileData);\n      \n      dispatch({\n        type: AUTH_ACTIONS.UPDATE_USER,\n        payload: response.user,\n      });\n\n      toast.success('Profile updated successfully!');\n      return { success: true };\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Profile update failed';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Change password function\n  const changePassword = async (passwordData) => {\n    try {\n      await authService.changePassword(passwordData);\n      toast.success('Password changed successfully!');\n      return { success: true };\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Password change failed';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\n  };\n\n  // Check if user has required role\n  const hasRole = (requiredRole) => {\n    if (!state.user) return false;\n    if (Array.isArray(requiredRole)) {\n      return requiredRole.includes(state.user.role);\n    }\n    return state.user.role === requiredRole;\n  };\n\n  // Check if user is admin\n  const isAdmin = () => state.user?.role === 'admin';\n\n  // Check if user is professor\n  const isProfessor = () => state.user?.role === 'professor';\n\n  // Check if user is student\n  const isStudent = () => state.user?.role === 'student';\n\n  // Context value\n  const value = {\n    user: state.user,\n    token: state.token,\n    loading: state.loading,\n    error: state.error,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    clearError,\n    hasRole,\n    isAdmin,\n    isProfessor,\n    isStudent,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n};\n\nexport default AuthContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC/E,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,WAAW,MAAM,yBAAyB;;AAEjD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACpCC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,aAAa;EAC1BC,aAAa,EAAE,eAAe;EAC9BC,aAAa,EAAE,eAAe;EAC9BC,MAAM,EAAE,QAAQ;EAChBC,cAAc,EAAE,gBAAgB;EAChCC,gBAAgB,EAAE,kBAAkB;EACpCC,gBAAgB,EAAE,kBAAkB;EACpCC,WAAW,EAAE,aAAa;EAC1BC,WAAW,EAAE,aAAa;EAC1BC,WAAW,EAAE;AACf,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKd,YAAY,CAACC,WAAW;IAC7B,KAAKD,YAAY,CAACK,cAAc;MAC9B,OAAO;QACL,GAAGO,KAAK;QACRd,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKC,YAAY,CAACE,aAAa;IAC/B,KAAKF,YAAY,CAACM,gBAAgB;MAChCV,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAEF,MAAM,CAACG,OAAO,CAACrB,KAAK,CAAC;MACnD,OAAO;QACL,GAAGiB,KAAK;QACRlB,IAAI,EAAEmB,MAAM,CAACG,OAAO,CAACtB,IAAI;QACzBC,KAAK,EAAEkB,MAAM,CAACG,OAAO,CAACrB,KAAK;QAC3BG,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKC,YAAY,CAACG,aAAa;IAC/B,KAAKH,YAAY,CAACO,gBAAgB;MAChCX,YAAY,CAACqB,UAAU,CAAC,OAAO,CAAC;MAChC,OAAO;QACL,GAAGL,KAAK;QACRlB,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXG,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEc,MAAM,CAACG;MAChB,CAAC;IAEH,KAAKhB,YAAY,CAACI,MAAM;MACtBR,YAAY,CAACqB,UAAU,CAAC,OAAO,CAAC;MAChC,OAAO;QACL,GAAGL,KAAK;QACRlB,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXG,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKC,YAAY,CAACQ,WAAW;MAC3B,OAAO;QACL,GAAGI,KAAK;QACRd,OAAO,EAAEe,MAAM,CAACG;MAClB,CAAC;IAEH,KAAKhB,YAAY,CAACS,WAAW;MAC3B,OAAO;QACL,GAAGG,KAAK;QACRb,KAAK,EAAE;MACT,CAAC;IAEH,KAAKC,YAAY,CAACU,WAAW;MAC3B,OAAO;QACL,GAAGE,KAAK;QACRlB,IAAI,EAAE;UAAE,GAAGkB,KAAK,CAAClB,IAAI;UAAE,GAAGmB,MAAM,CAACG;QAAQ;MAC3C,CAAC;IAEH;MACE,OAAOJ,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMM,WAAW,gBAAGjC,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMkC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACT,KAAK,EAAEU,QAAQ,CAAC,GAAGnC,UAAU,CAACwB,WAAW,EAAElB,YAAY,CAAC;;EAE/D;EACAL,SAAS,CAAC,MAAM;IACd,MAAMmC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAM5B,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAE3C,IAAIF,KAAK,EAAE;QACT,IAAI;UACF,MAAM6B,QAAQ,GAAG,MAAMlC,WAAW,CAACiC,WAAW,CAAC,CAAC;UAChDD,QAAQ,CAAC;YACPR,IAAI,EAAEd,YAAY,CAACE,aAAa;YAChCc,OAAO,EAAE;cACPtB,IAAI,EAAE8B,QAAQ,CAAC9B,IAAI;cACnBC,KAAK,EAAEA;YACT;UACF,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;UACdH,YAAY,CAACqB,UAAU,CAAC,OAAO,CAAC;UAChCK,QAAQ,CAAC;YAAER,IAAI,EAAEd,YAAY,CAACI;UAAO,CAAC,CAAC;QACzC;MACF,CAAC,MAAM;QACLkB,QAAQ,CAAC;UAAER,IAAI,EAAEd,YAAY,CAACQ,WAAW;UAAEQ,OAAO,EAAE;QAAM,CAAC,CAAC;MAC9D;IACF,CAAC;IAEDO,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC,IAAI;MACFJ,QAAQ,CAAC;QAAER,IAAI,EAAEd,YAAY,CAACC;MAAY,CAAC,CAAC;MAE5C,MAAMuB,QAAQ,GAAG,MAAMlC,WAAW,CAACmC,KAAK,CAACC,WAAW,CAAC;MAErDJ,QAAQ,CAAC;QACPR,IAAI,EAAEd,YAAY,CAACE,aAAa;QAChCc,OAAO,EAAE;UACPtB,IAAI,EAAE8B,QAAQ,CAAC9B,IAAI;UACnBC,KAAK,EAAE6B,QAAQ,CAAC7B;QAClB;MACF,CAAC,CAAC;MAEFN,KAAK,CAACsC,OAAO,CAAC,mBAAmB,CAAC;MAClC,OAAO;QAAEA,OAAO,EAAE;MAAK,CAAC;IAE1B,CAAC,CAAC,OAAO5B,KAAK,EAAE;MAAA,IAAA6B,eAAA,EAAAC,oBAAA;MACd,MAAMC,YAAY,GAAG,EAAAF,eAAA,GAAA7B,KAAK,CAACyB,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBG,IAAI,cAAAF,oBAAA,uBAApBA,oBAAA,CAAsBG,OAAO,KAAI,cAAc;MAEpEV,QAAQ,CAAC;QACPR,IAAI,EAAEd,YAAY,CAACG,aAAa;QAChCa,OAAO,EAAEc;MACX,CAAC,CAAC;MAEFzC,KAAK,CAACU,KAAK,CAAC+B,YAAY,CAAC;MACzB,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAE5B,KAAK,EAAE+B;MAAa,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMG,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACFZ,QAAQ,CAAC;QAAER,IAAI,EAAEd,YAAY,CAACK;MAAe,CAAC,CAAC;MAE/C,MAAMmB,QAAQ,GAAG,MAAMlC,WAAW,CAAC2C,QAAQ,CAACC,QAAQ,CAAC;MAErDZ,QAAQ,CAAC;QACPR,IAAI,EAAEd,YAAY,CAACM,gBAAgB;QACnCU,OAAO,EAAE;UACPtB,IAAI,EAAE8B,QAAQ,CAAC9B,IAAI;UACnBC,KAAK,EAAE6B,QAAQ,CAAC7B;QAClB;MACF,CAAC,CAAC;MAEFN,KAAK,CAACsC,OAAO,CAAC,0BAA0B,CAAC;MACzC,OAAO;QAAEA,OAAO,EAAE;MAAK,CAAC;IAE1B,CAAC,CAAC,OAAO5B,KAAK,EAAE;MAAA,IAAAoC,gBAAA,EAAAC,qBAAA;MACd,MAAMN,YAAY,GAAG,EAAAK,gBAAA,GAAApC,KAAK,CAACyB,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBJ,IAAI,cAAAK,qBAAA,uBAApBA,qBAAA,CAAsBJ,OAAO,KAAI,qBAAqB;MAE3EV,QAAQ,CAAC;QACPR,IAAI,EAAEd,YAAY,CAACO,gBAAgB;QACnCS,OAAO,EAAEc;MACX,CAAC,CAAC;MAEFzC,KAAK,CAACU,KAAK,CAAC+B,YAAY,CAAC;MACzB,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAE5B,KAAK,EAAE+B;MAAa,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMO,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAM/C,WAAW,CAAC+C,MAAM,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOtC,KAAK,EAAE;MACd;MACAuC,OAAO,CAACvC,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC3C;IAEAuB,QAAQ,CAAC;MAAER,IAAI,EAAEd,YAAY,CAACI;IAAO,CAAC,CAAC;IACvCf,KAAK,CAACkD,IAAI,CAAC,yBAAyB,CAAC;EACvC,CAAC;;EAED;EACA,MAAMC,aAAa,GAAG,MAAOC,WAAW,IAAK;IAC3C,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMlC,WAAW,CAACkD,aAAa,CAACC,WAAW,CAAC;MAE7DnB,QAAQ,CAAC;QACPR,IAAI,EAAEd,YAAY,CAACU,WAAW;QAC9BM,OAAO,EAAEQ,QAAQ,CAAC9B;MACpB,CAAC,CAAC;MAEFL,KAAK,CAACsC,OAAO,CAAC,+BAA+B,CAAC;MAC9C,OAAO;QAAEA,OAAO,EAAE;MAAK,CAAC;IAE1B,CAAC,CAAC,OAAO5B,KAAK,EAAE;MAAA,IAAA2C,gBAAA,EAAAC,qBAAA;MACd,MAAMb,YAAY,GAAG,EAAAY,gBAAA,GAAA3C,KAAK,CAACyB,QAAQ,cAAAkB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBX,IAAI,cAAAY,qBAAA,uBAApBA,qBAAA,CAAsBX,OAAO,KAAI,uBAAuB;MAC7E3C,KAAK,CAACU,KAAK,CAAC+B,YAAY,CAAC;MACzB,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAE5B,KAAK,EAAE+B;MAAa,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMc,cAAc,GAAG,MAAOC,YAAY,IAAK;IAC7C,IAAI;MACF,MAAMvD,WAAW,CAACsD,cAAc,CAACC,YAAY,CAAC;MAC9CxD,KAAK,CAACsC,OAAO,CAAC,gCAAgC,CAAC;MAC/C,OAAO;QAAEA,OAAO,EAAE;MAAK,CAAC;IAE1B,CAAC,CAAC,OAAO5B,KAAK,EAAE;MAAA,IAAA+C,gBAAA,EAAAC,qBAAA;MACd,MAAMjB,YAAY,GAAG,EAAAgB,gBAAA,GAAA/C,KAAK,CAACyB,QAAQ,cAAAsB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBf,IAAI,cAAAgB,qBAAA,uBAApBA,qBAAA,CAAsBf,OAAO,KAAI,wBAAwB;MAC9E3C,KAAK,CAACU,KAAK,CAAC+B,YAAY,CAAC;MACzB,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAE5B,KAAK,EAAE+B;MAAa,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMkB,UAAU,GAAGA,CAAA,KAAM;IACvB1B,QAAQ,CAAC;MAAER,IAAI,EAAEd,YAAY,CAACS;IAAY,CAAC,CAAC;EAC9C,CAAC;;EAED;EACA,MAAMwC,OAAO,GAAIC,YAAY,IAAK;IAChC,IAAI,CAACtC,KAAK,CAAClB,IAAI,EAAE,OAAO,KAAK;IAC7B,IAAIyD,KAAK,CAACC,OAAO,CAACF,YAAY,CAAC,EAAE;MAC/B,OAAOA,YAAY,CAACG,QAAQ,CAACzC,KAAK,CAAClB,IAAI,CAAC4D,IAAI,CAAC;IAC/C;IACA,OAAO1C,KAAK,CAAClB,IAAI,CAAC4D,IAAI,KAAKJ,YAAY;EACzC,CAAC;;EAED;EACA,MAAMK,OAAO,GAAGA,CAAA;IAAA,IAAAC,WAAA;IAAA,OAAM,EAAAA,WAAA,GAAA5C,KAAK,CAAClB,IAAI,cAAA8D,WAAA,uBAAVA,WAAA,CAAYF,IAAI,MAAK,OAAO;EAAA;;EAElD;EACA,MAAMG,WAAW,GAAGA,CAAA;IAAA,IAAAC,YAAA;IAAA,OAAM,EAAAA,YAAA,GAAA9C,KAAK,CAAClB,IAAI,cAAAgE,YAAA,uBAAVA,YAAA,CAAYJ,IAAI,MAAK,WAAW;EAAA;;EAE1D;EACA,MAAMK,SAAS,GAAGA,CAAA;IAAA,IAAAC,YAAA;IAAA,OAAM,EAAAA,YAAA,GAAAhD,KAAK,CAAClB,IAAI,cAAAkE,YAAA,uBAAVA,YAAA,CAAYN,IAAI,MAAK,SAAS;EAAA;;EAEtD;EACA,MAAMO,KAAK,GAAG;IACZnE,IAAI,EAAEkB,KAAK,CAAClB,IAAI;IAChBC,KAAK,EAAEiB,KAAK,CAACjB,KAAK;IAClBG,OAAO,EAAEc,KAAK,CAACd,OAAO;IACtBC,KAAK,EAAEa,KAAK,CAACb,KAAK;IAClB0B,KAAK;IACLQ,QAAQ;IACRI,MAAM;IACNG,aAAa;IACbI,cAAc;IACdI,UAAU;IACVC,OAAO;IACPM,OAAO;IACPE,WAAW;IACXE;EACF,CAAC;EAED,oBACEnE,OAAA,CAAC0B,WAAW,CAAC4C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAzC,QAAA,EAChCA;EAAQ;IAAA2C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA7C,EAAA,CA3LaF,YAAY;AAAAgD,EAAA,GAAZhD,YAAY;AA4LzB,OAAO,MAAMiD,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGpF,UAAU,CAACgC,WAAW,CAAC;EAEvC,IAAI,CAACoD,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,OAAO;AAUpB,eAAelD,WAAW;AAAC,IAAAiD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}